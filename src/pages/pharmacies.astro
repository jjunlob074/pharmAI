---
import Layout from '~/layouts/BaseLayout.astro';

const apiKey = '674c8766b2454871a498e80196cdb426';

async function fetchCities(query) {
  const response = await fetch(`https://api.geoapify.com/v1/geocode/autocomplete?text=${query}&type=city&limit=5&apiKey=${apiKey}`);
  if (response.ok) {
    const data = await response.json();
    console.log('Cities data:', data); // Log the cities data
    return data.features;
  } else {
    console.error('Error fetching cities:', response.statusText);
  }
}

async function fetchPharmacies(lat, lon) {
  const response = await fetch(`https://api.geoapify.com/v2/places?categories=healthcare.pharmacy&filter=circle:${lon},${lat},5000&limit=10&apiKey=${apiKey}`);
  if (response.ok) {
    const data = await response.json();
    console.log('Pharmacies data:', JSON.stringify(data, null, 2)); // Log the pharmacies data in a detailed format
    return data.features;
  } else {
    console.error('Error fetching pharmacies:', response.statusText);
  }
}
---

<Layout>
    <h1 class="text-2xl font-semibold m-4">Pharmacies</h1>
  <div>
    <input type="text" id="city-input" placeholder="Escribe una ciudad..." class="w-full p-2 mb-4 border rounded text-black" />
    <ul id="city-suggestions" class="mb-4"></ul>
    <div id="map" class="h-96 mb-4"></div>
    <div id="pharmacy-list"></div>
  </div>

  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const apiKey = '674c8766b2454871a498e80196cdb426';

      async function fetchCities(query) {
        const response = await fetch(`https://api.geoapify.com/v1/geocode/autocomplete?text=${query}&type=city&limit=5&apiKey=${apiKey}`);
        if (response.ok) {
          const data = await response.json();
          console.log('Cities data:', data); // Log the cities data
          return data.features;
        } else {
          console.error('Error fetching cities:', response.statusText);
        }
      }

      async function fetchPharmacies(lat, lon) {
        const response = await fetch(`https://api.geoapify.com/v2/places?categories=healthcare.pharmacy&filter=circle:${lon},${lat},5000&limit=10&apiKey=${apiKey}`);
        if (response.ok) {
          const data = await response.json();
          console.log('Pharmacies data:', JSON.stringify(data, null, 2)); // Log the pharmacies data in a detailed format
          return data.features;
        } else {
          console.error('Error fetching pharmacies:', response.statusText);
        }
      }

      const cityInput = document.getElementById('city-input');
      const citySuggestions = document.getElementById('city-suggestions');
      const pharmacyList = document.getElementById('pharmacy-list');
      let map = L.map('map').setView([40.416775, -3.703790], 13);

      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors'
      }).addTo(map);

      cityInput.addEventListener('input', async () => {
        const query = cityInput.value;
        if (query.length > 2) {
          const cities = await fetchCities(query);
          citySuggestions.innerHTML = '';
          cities.forEach(city => {
            const li = document.createElement('li');
            li.textContent = city.properties.formatted;
            li.className = 'text-black cursor-pointer p-2 bg-green-200 hover:bg-green-300 border border-green-400 rounded mb-2';
            li.addEventListener('click', async () => {
              const { lat, lon } = city.properties;
              cityInput.value = city.properties.formatted;
              citySuggestions.innerHTML = '';
              map.setView([lat, lon], 13);
              const pharmacies = await fetchPharmacies(lat, lon);
              pharmacyList.innerHTML = ''; // Clear previous results
              pharmacies.forEach(pharmacy => {
                const [pharmLon, pharmLat] = pharmacy.geometry.coordinates;
                const name = pharmacy.properties.name || pharmacy.properties.address_line1;
                L.marker([pharmLat, pharmLon]).addTo(map)
                  .bindPopup(name)
                  .openPopup();

                // Display detailed pharmacy information
                const pharmacyItem = document.createElement('div');
                pharmacyItem.className = 'pharmacy-item mb-4 p-4 border border-green-300 rounded bg-green-500 text-white';
                pharmacyItem.innerHTML = `
                  <strong>${name}</strong><br>
                  ${pharmacy.properties.formatted ? `<strong>Direcci√≥n:</strong> ${pharmacy.properties.formatted}<br>` : ''}
                `;
                pharmacyList.appendChild(pharmacyItem);
              });
            });
            citySuggestions.appendChild(li);
          });
        }
      });
    });
  </script>
</Layout>
