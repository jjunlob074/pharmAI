---
import { Icon } from "astro-icon/components";
import PharmAIComponent from "~/components/PharmAI.astro";
import PharmAIlogo from "~/components/PharmAILogo.astro";
import Logo from "~/components/Logo.astro";
//export const prerender = true;

const { generator, site } = Astro;
const image = new URL("social.jpg", site);
const description =
  "Build fast websites, faster. Astro is a new kind of site builder for the modern web. Lightning-fast performance meets powerful developer experience.";
---

<!doctype html>
<html lang="en" class="h-full motion-safe:scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
    <meta name="generator" content={generator} />

    <title>Astro Landing Page</title>
    <meta name="description" content={description} />

    <!-- social media -->
    <meta property="og:title" content="Astro" />
    <meta property="og:type" content="website" />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />
    <meta property="og:url" content={site} />
    <meta name="twitter:card" content="summary_large_image" />

    
  </head>
  <body class="dark-mode">
   <Logo />
    <header class="container">
      <button id="mode-toggle">
        <Icon name="mdi:theme-light-dark" class="theme-icon" />
      </button>
      <PharmAIComponent glow />
      <div class="intro">
        <div class="intro-content">
          <p class="intro-title">
            <PharmAIlogo />
          </p>
          <p class="intro-subtitle">
            Hello! I'm PharmaBot. I'm here to provide you with information about medications, answer your health-related questions, and assist you in finding pharmaceutical products. Feel free to ask me anything related to your well-being!
          </p>
        </div>
      </div>
    </header>
    <main class="container">
      <ul class="chat"></ul>
    </main>
    <div class="container">
    </div>
    <footer class="container">
      <form action="#" onsubmit="handleSubmit(event)">
        <div class="autogrow">
          <textarea
            id="message"
            name="message"
            onkeydown="handleKeydown(event)"
            oninput="this.parentNode.dataset.value = this.value"
            placeholder="hi! Can I help you?"
            cols="30"></textarea>
          <button type="submit">
            <svg
              width="24"
              height="24"
              viewBox="0 0 32 32"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <title>Send</title>
              <path
                fill-rule="evenodd"
                clip-rule="evenodd"
                d="M5.64161 2.18531C6.04591 2.14469 6.453 2.22818 6.80868 2.42468L6.81379 2.4275L27.9217 14.25L27.9244 14.2515C28.2358 14.4244 28.4954 14.6774 28.6764 14.9842C28.8578 15.292 28.9535 15.6427 28.9535 16C28.9535 16.3572 28.8578 16.708 28.6764 17.0157C28.4954 17.3226 28.2358 17.5756 27.9244 17.7485L27.9217 17.75L6.80869 29.5753C6.45301 29.7718 6.04591 29.8553 5.64161 29.8147C5.2373 29.774 4.85495 29.6112 4.54548 29.3479C4.236 29.0846 4.01408 28.7332 3.90925 28.3406C3.80455 27.9485 3.82162 27.5338 3.95818 27.1517L7.93379 16L3.95868 4.84968C3.82192 4.46735 3.8045 4.05166 3.90925 3.65933C4.01408 3.26675 4.236 2.9154 4.54548 2.65208C4.85496 2.38875 5.2373 2.22594 5.64161 2.18531ZM27.4376 15.125L26.9489 15.9975L5.84155 4.17529L5.84205 4.17668L9.8113 15.3106C9.98396 15.7539 9.98396 16.246 9.8113 16.6894L5.84155 27.8247L26.9489 16.0025L26.9535 16L27.4376 15.125Z"
                fill="currentColor"></path>
              <path
                fill-rule="evenodd"
                clip-rule="evenodd"
                d="M8 16C8 15.4477 8.44772 15 9 15H17C17.5523 15 18 15.4477 18 16C18 16.5523 17.5523 17 17 17H9C8.44772 17 8 16.5523 8 16Z"
                fill="currentColor"></path>
            </svg>
          </button>
        </div>
      </form>
    </footer>


    <style>
      :root {
        --container-width: 1200px;
      }
      :global(*) {
        box-sizing: border-box;
      }
      body {
        font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",
          Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue",
          sans-serif;
        display: flex;
        flex-direction: column;
        margin: 0;
        position: relative;
        background: #111827;
        color-scheme: dark;
        height: 100vh;
        height: 100dvh;
        line-height: 1.33;
        max-width: 100vw;
        overflow-x: hidden;
      }
      body::before {
        position: absolute;
        content: "";
        mix-blend-mode: overlay;
        opacity: 0.4;
        inset: 0;
        width: 100%;
        height: 100%;
        background-repeat: repeat;
        pointer-events: none;
      }
      
  body.light-mode {
    background: #ffffff;
    color: #111827;
  }

  body.dark-mode {
    background: #111827;
    color: #ffffff;
  }

  body.light-mode .container {
    box-shadow: 0 0 40px 2px #ffffff;
  }

  body.dark-mode .container {
    box-shadow: 0 0 40px 2px #111827;
  }

  /* Rest of your styles... */

  #mode-toggle {
    position: fixed;
    top: 1rem;
    right: 2rem;
    cursor: pointer;
    border-radius: 0.25rem;
  }
  #mode-toggle svg {
    color:#000;
    width: 32px;
    height: 32px;
    background-color: #20BF5B;
  }


      @font-face {
        font-family: "MD IO 0.5";
        src: url("https://fonts-cdn.astro.build/MD IO/Web/MDIO0.5-Regular.woff2")
          format("woff2");
        font-weight: 400;
        font-style: normal;
        font-display: swap;
      }
      a {
        color: rgba(255, 255, 255, 0.8);
      }
      .container {
        width: 100%;
        max-width: var(--container-width);
        margin-left: auto;
        margin-right: auto;
        box-shadow: 0 0 40px 2px #111827;
      }
      header {
        position: relative;
        margin: 0.75rem;
        padding: 0.75rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 0;
      }
      header.inactive .intro {
        display: none;
        opacity: 0;
        pointer-events: none;
        user-select: none;
      }
      .intro {
        max-width: 100%;
        color: white;
        transition: opacity 500ms ease-out;
        text-align: left;
      }
      .intro .intro-content {
        max-width: 400px;
      }
      .intro .intro-title {
        margin: 2rem 0 0 0;
        padding: 1rem 4rem;
        font-size: 2rem;
        display: inline-flex;
        align-items: center;
        justify-content: space-between;
        width: 100%;
        gap: 8px;
        justify-content: space-between;
      }
      .intro .intro-subtitle {
        margin: 0.25rem 0 1rem 0;
        color: rgba(133, 139, 152, 1);
        text-align: left;
        font-size: 1.3rem;
        padding: 0 0.5rem;
      }
      .learn-more-button {
        background: linear-gradient(83.21deg, #04f460 0%, #045710 100%);
        padding: 8px 12px;
        font-weight: bold;
      }
      main {
        padding-left: 1rem;
        padding-right: 1rem;
        padding-bottom: 2rem;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        gap: 1rem;
        overflow-y: auto;
      }
      footer {
        display: flex;
        flex-flow: column;
        position: relative;
      }

      footer button {
        position: absolute;
        right: 19px;
        top: 19px;
        --size: 2.5rem;
        width: var(--size);
        height: var(--size);
        border-radius: 50%;
        border: 0;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      footer svg {
        margin-right: -0.25rem;
      }

      .autogrow {
        display: grid;
        overflow-y: scroll;
        padding-left: 1px;
      }
      .autogrow::-webkit-scrollbar {
        display: none;
      }
      .autogrow > textarea {
        resize: none;
        width: 100vw;
        height: 100px;
        max-width: var(--container-width);
        outline: 0;
        flex-grow: 1;
        padding: 1rem;
        margin-bottom: 1rem;
        padding-right: 68px;
        font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI",
          Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue",
          sans-serif;
        font-size: 1.25rem;
        line-height: 1;
        border: 2px solid #136d06;
        margin-left: -1px;
        margin-right: -1px;

        background: #23262d;
        color: #bfc1c9;

        /* Place on top of each other */
        grid-area: 1 / 1 / 2 / 2;
      }
      .autogrow > textarea:focus {
        border-color: white;
      }

      button[type="submit"] {
        background: linear-gradient(83.21deg, #1ef007 0%, #0d4901 100%);
      }

      button {
        --size: 2rem;
        width: var(--size);
        height: var(--size);
        border: 0;
        background: transparent;
        margin: 0;
        padding: 0;
        color: rgb(255 255 255 / 60%);
      }

      button:hover {
        color: rgb(255 255 255 / 100%);
      }

      button.fill {
        background: rgb(255 255 255 / 100%);
        border-radius: 100%;
        color: #17191e;
      }

      .chat {
        margin-top: 1rem;
        display: grid;
        grid-template-columns: repeat(6, 1fr);
        gap: 1rem;
        list-style: none;
        padding: 0;
        margin: 0;
      }
    </style>

    <style is:global>
      ::selection {
        background: #4af2c8;
        color: #17191e;
      }
      hey-houston {
        z-index: 2;
      }
      code {
        padding: 0.125em 0.33em;
        border-radius: 0.33em;
        font-size: inherit;
        background: rgba(255 255 255 / 10%);
      }
      .chat pre,
      .chat code {
        background: rgba(255 255 255 / 0.1);
      }
      .chat pre > code {
        padding: 0;
        border-radius: 0;
        background: none;
      }
      .chat pre {
        padding: 1rem 1.5rem;
        margin-left: -1.5rem;
        margin-right: -1.5rem;
        max-width: calc(100% + 3rem);
        overflow-x: auto;
      }
      .chat > .message {
        --radius: 1.75rem;
        position: relative;
        border-radius: var(--radius);
        grid-column: span 6 / -1;
        overflow-wrap: break-word;
        padding: 1rem 1.5rem;
        animation: fade-in 300ms ease-out forwards;
      }
      .chat > .message::after {
        --size: 1rem;
        content: "";
        position: absolute;
        bottom: 0;
        height: var(--size);
        width: var(--size);
        z-index: 2;
      }
      .chat > .message[data-user] {
        background: linear-gradient(83.21deg, #0e9841 0%, #339403 100%);
        border-bottom-right-radius: 0;
        color: white;
      }
      .chat > .message[data-user]::after {
        background: #1e5702;
        right: calc(var(--size) * -1);
        border-bottom-right-radius: 8rem;
        background: radial-gradient(
          circle at top right,
          rgba(0, 0, 0, 0) 0,
          rgba(0, 0, 0, 0) var(--size),
          #1e5702 var(--size)
        );
      }
      .chat > .message:not([data-user])::after {
        border-top-left-radius: var(--size);
        border-bottom-left-radius: 8rem;
        background: radial-gradient(
          circle at top left,
          rgba(0, 0, 0, 0) 0,
          rgba(0, 0, 0, 0) var(--size),
          #d6d8e2 var(--size)
        );
        left: calc(var(--size) * -1);
      }
      .chat > .message:not([data-user]) {
        background: linear-gradient(180deg, #ffffff, #d6d8e2);
        border-bottom-left-radius: 0;
        grid-column: 1 / -1;
      }
      .chat > .message:not([data-user]) code {
        background: rgba(0 0 0 / 0.075);
      }
      .message a {
        color: #1e5702;
      }
      .message a:where(:visited) {
        color: #1e5702;
      }
      .heading {
        display: flex;
        align-items: center;
        gap: 1rem;
      }
      .heading svg {
        --size: 24px;
        width: var(--size);
        height: var(--size);
      }
      .sources {
        position: relative;
        grid-column: 1 / -1;
        margin-top: 0;
        font-size: 0.9rem;
        overflow-wrap: break-word;
        display: flex;
        flex-flow: column;
        gap: 0.33em;
        padding: 1rem 1.5rem;
        color: rgba(255, 255, 255, 0.8);
        font-family: "MD IO 0.5", system-ui, -apple-system, BlinkMacSystemFont;
      }
      .sources::before,
      .sources::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      }
      .sources::before {
        z-index: -1;
        background: #17191e;
        top: 2px;
        right: 2px;
        bottom: 2px;
        left: 2px;
      }
      .sources::after {
        z-index: -2;
        background: linear-gradient(247.23deg, #50f24a 0%, #47b32f 100%);
        border-radius: 3px;
      }
      .sources h5 {
        margin: 1rem -1.5rem -1rem;
        padding: 1rem 1.5rem;
        background: linear-gradient(
          to bottom,
          rgba(255, 255, 255, 0.1) 0%,
          rgba(255, 255, 255, 0) 200%
        );
        font-size: 0.9rem;
        font-weight: normal;
        color: white;
      }

      .sources h2 {
        font-size: 1.5rem;
        margin: 0.5rem 0 0.25rem 0;
        color: white;
      }
      .sources li {
        list-style: initial;
      }
      .sources > a {
        display: block;
        color: rgba(255, 255, 255, 0.8);
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
      }
      .sources > h5 > a {
        color: white;
      }
      .sources > a::before {
        content: "> ";
        display: inline-block;
        margin-right: 8px;
        opacity: 0.4;
      }
      .sources > a:hover::before {
        opacity: 0.5;
      }
      .sources > a:is(:hover, :focus) {
        color: rgba(255, 255, 255, 1);
      }
      @keyframes fade-in {
        from {
          opacity: 0;
          transform: translateY(1rem);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      @keyframes shake {
        0% {
          transform: translateX(0);
        }
        25% {
          transform: translateX(0.75rem);
        }
        50% {
          transform: translateX(-0.75rem);
        }
        75% {
          transform: translateX(0.75rem);
        }
        100% {
          transform: translateX(0);
        }
      }
     /* Aplicar estilos a todas las tablas */
      table {
          width: 100%;
          border-collapse: collapse;
          margin: 20px 0;
          font-size: 18px;
          text-align: left;
          table-layout: fixed; /* Asegurar que las columnas tengan un ancho fijo */
      }

      /* Aplicar estilos a todas las celdas de encabezado y celdas de datos */
      table th, table td {
          padding: 12px 15px;
          border: 1px solid #dddddd;
          height: 100%; /* Asegurar que todas las celdas tengan la misma altura */
          box-sizing: border-box; /* Para que el padding y el borde se incluyan en la altura total */
      }

      tbody td:first-child {
          font-weight: bold;
          font-size: 1.5em;
      }

      /* Ajustar el ancho de las columnas de manera dinámica */
      table th, table td {
          width: calc(100% / var(--column-count)); /* Ajustar el ancho según el número de columnas */
      }

      @media (min-width: 640px) {
        .chat > .message {
          grid-column: span 5 / -1;
        }
        .autogrow > textarea {
          border-radius: 12px;
        }
      }
    </style>

<script>
  import { makeAskRequest, markdown } from "../api";
  
  const header = document.querySelector("header")!;
  const houston = document.querySelector("hey-houston")! as any;
  
  const h = (
    tag: string,
    props: Record<string, any> = {},
    ...children: any[]
  ) => {
    const node = document.createElement(tag);
    for (const [key, value] of Object.entries(props)) {
      node.setAttribute(key, value);
    }
    for (const child of children) {
      if (child instanceof Node) {
        node.appendChild(child);
      } else if (child || child === 0) {
        node.innerHTML = child;
      }
    }
    return node;
  };

  const messages = document.querySelector(".chat") as HTMLDivElement;

  async function handleSubmit(event: Event) {
    event.preventDefault();
    if (houston.classList.contains("loading")) {
      return;
    }
    const form = event.target as HTMLFormElement;
    const textarea = form.message as HTMLTextAreaElement;
    let message = textarea.value;
    if (!message.trim()) {
      if (textarea.placeholder === "Why should I use Astro?") {
        message = textarea.placeholder;
        textarea.placeholder = "How does routing work?";
      } else if (
        textarea.placeholder === "How does routing work in Astro?"
      ) {
        message = textarea.placeholder;
        textarea.placeholder = "Ask another question...";
      } else {
        return;
      }
    }

    const bubble = h(
      "li",
      { class: "message", "data-user": "" },
      markdown(message)
    );
    messages.appendChild(bubble);
    bubble.scrollIntoView();
    header.classList.add("inactive");

    textarea.value = "";
    textarea.blur();

    const thinking = houston.think();
    let emote: string = "default";
    try {
      const delay = new Promise((r) => setTimeout(r, 3200));
      const Apicall = await makeAskRequest(message);
      console.log(Apicall.response);
      await delay;
      emote = Apicall.response ? "happy" : "disappointed";
      if (!Apicall.response) {
        const bubble = h(
          "li",
          { class: "sources" },
        );
        messages.appendChild(bubble);
        bubble.scrollIntoView();
      } else {
        const bubble = h(
          "li",
          { class: "sources" },
          formatAPIResponse(Apicall.response)
        );
        messages.appendChild(bubble);
        bubble.scrollIntoView();
        // const footer = document.querySelector(".footer")! as HTMLDivElement;
        // const footerLinks = footer.querySelector(".links") as HTMLDivElement;
      }
    } catch (err) {
      console.error(err);
      const status = err.cause;
      if (status == 400) {
        emote = "disappointed";
        const bubble = h(
          "li",
          { class: "sources" },
          `I am unable to Apicall.responsepond to content like this.`
        );
        messages.appendChild(bubble);
        bubble.scrollIntoView();
      } else {
        emote = "disappointed";
        const bubble = h(
          "li",
          { class: "sources" },
          `Something went wrong! Please try again.`
        );
        messages.appendChild(bubble);
        bubble.scrollIntoView();
      }
    } finally {
      thinking.stop();
      houston.emote(emote);
      setTimeout(() => houston.emote("default"), 1250);
    }
  }
  
  function formatAPIResponse(response) {
    
  // Eliminar líneas que contienen solo '---'
  response = response.replace(/^\|---+\|.*\|$/gm, "");

  // Replace text between ** with <h2>
  response = response.replace(/(\d+\.\s*)?\*\*(.*?)\*\*/g, "<h2>$1$2</h2>");

  // Replace text between * with <li> inside a single <ul> block
  response = response.replace(/^\* /gm, "<li>"); // Convert * at the start of a line to <li>
  response = response.replace(/\n\* /g, "</li><li>"); // Convert newline and * to end and start <li>

  // Wrap all <li> tags with <ul> if not already nested
  if (!response.includes("<ul>")) {
    response = "<ul>" + response + "</ul>";
  }

  // Ensure all <li> are properly closed
  response = response.replace(/<\/li><li>$/, "</li></ul>"); // Close last <li> and <ul>
  response = response.replace(/<\/li><li>/g, "</li><li>"); // Correct any misplaced list tags
  response = response.replace(/^<\/li><li>/, "<li>"); // Fix improper start if it occurs
  
   // Handle tables
  response = response.replace(/\|([^|\n\r]*)\|([^|\n\r]*)\|([^|\n\r]*)\|([^|\n\r]*)\|([^|\n\r]*)\|([^|\n\r]*)\|/g, "<tr><td>$1</td><td>$2</td><td>$3</td><td>$4</td><td>$5</td><td>$6</td></tr>");
  response = response.replace(/\|([^|\n\r]*)\|([^|\n\r]*)\|([^|\n\r]*)\|([^|\n\r]*)\|([^|\n\r]*)\|/g, "<tr><td>$1</td><td>$2</td><td>$3</td><td>$4</td><td>$5</td></tr>");
  response = response.replace(/\|([^|\n\r]*)\|([^|\n\r]*)\|([^|\n\r]*)\|([^|\n\r]*)\|/g, "<tr><td>$1</td><td>$2</td><td>$3</td><td>$4</td></tr>");
  response = response.replace(/\|([^|\n\r]*)\|([^|\n\r]*)\|([^|\n\r]*)\|/g, "<tr><td>$1</td><td>$2</td><td>$3</td></tr>");
  response = response.replace(/\|([^|\n\r]*)\|([^|\n\r]*)\|/g, "<tr><td>$1</td><td>$2</td></tr>");
  response = response.replace(/<tr><td>([^<]*)<\/td><td>([^<]*)<\/td><td>([^<]*)<\/td><td>([^<]*)<\/td><td>([^<]*)<\/td><td>([^<]*)<\/td><\/tr>/g, "<tr><th>$1</th><th>$2</th><th>$3</th><th>$4</th><th>$5</th><th>$6</th></tr>");

  // Wrap tables with <table> tags
  response = response.replace(/(<tr><td>.*?<\/td><\/tr>)/g, "<table>$1</table>");
  response = response.replace(/<\/table><table>/g, "");

  // Wrap everything in a <div> container
  response = "<div>" + response + "</div>";

  return response;
}

function toggleMode() {
  console.log("click");
    const body = document.body;
    if (body.classList.contains('dark-mode')) {
      body.classList.remove('dark-mode');
      body.classList.add('light-mode');
    } else {
      body.classList.remove('light-mode');
      body.classList.add('dark-mode');
    }
  }

  function handleKeydown(event: KeyboardEvent) {
    if (event.shiftKey) return;
    if (event.key !== "Enter") return;
    event.preventDefault();
    (event.target as HTMLElement).closest("form")!.requestSubmit();
  }
  
  document.addEventListener('DOMContentLoaded', function() {
        const tables = document.querySelectorAll('table');
        tables.forEach(table => {
            const columnCount = table.querySelectorAll('tr:first-child td, tr:first-child th').length;
            table.style.setProperty('--column-count', columnCount.toString());
        });
    });

  const changeTheme = document.querySelector('#mode-toggle');

  changeTheme.addEventListener('click', toggleMode);

  globalThis.handleSubmit = handleSubmit;
  globalThis.handleKeydown = handleKeydown;
</script>
  </body>
</html>
